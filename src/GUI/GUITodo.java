/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import io.ImageManager;
import java.awt.Image;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import muestreo.Convolucion;
import muestreo.HistogramaFrecuencias;
import muestreo.escalaGrises;
import muestreo.expansion;
import muestreo.negativo;
import muestreo.temperatura;
import org.opencv.core.*;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author mijum
 */
public class GUITodo extends javax.swing.JFrame {

    /**
     * Creates new form GUITodo
     */
    expansion ex = new expansion();
    public GUITodo() {
        this.setVisible(true);
        initComponents();
        jSlider1.setValue(0);
        silu.setValue(0);
        negativos.setEnabled(false);
        negativos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos los canales", "Rojo", "Verde", "Azul","Rojo y verde","Rojo y Azul","Verde y Azul"}));
        expansiones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opcion","Lineal","Logaritmica","Tangente","Cuadratica"}));
        boxlucion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "Seleccione una mascara","Dif. Pixeles","Pixeles Separados",
            "Operador Prewitt","Operador Sobel","Operador Roberts","Kirsch","Laplace"
        }));
        this.jSlider1.addChangeListener( new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
                JSlider so = (JSlider) ce.getSource();
                fin =  t.temperaturaImagen(ori, so.getValue());
                Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
            }
            
           
        });
        this.silu.addChangeListener( new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
                JSlider so = (JSlider) ce.getSource();
                fin =  t.traslacion(ori, so.getValue());
                Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
            }
           
        });
    }
    ImageManager img = new ImageManager();
    Image ori,fin,nb=null;
    Boolean iluminacion = false, nega = false, temperatura = false;
    temperatura t = new temperatura();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        abrirImagen = new javax.swing.JButton();
        negativos = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        Resultante = new javax.swing.JLabel();
        Original = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        save = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        silu = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        expansiones = new javax.swing.JComboBox<>();
        j = new javax.swing.JTextField();
        k = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        bn = new javax.swing.JButton();
        boxlucion = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1484, 757));
        setPreferredSize(new java.awt.Dimension(1525, 600));

        abrirImagen.setText("Abrir");
        abrirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirImagenActionPerformed(evt);
            }
        });

        negativos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        negativos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                negativosItemStateChanged(evt);
            }
        });
        negativos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativosActionPerformed(evt);
            }
        });

        jLabel3.setText("Hacer negativo en:");

        Resultante.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Original.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        save.setText("Guardar");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jSlider1.setMaximum(255);
        jSlider1.setMinimum(-255);

        silu.setMaximum(255);
        silu.setMinimum(-255);

        jLabel1.setText("Iluminacion");

        jLabel2.setText("Temperatura");

        expansiones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        expansiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expansionesActionPerformed(evt);
            }
        });

        j.setText("0");
        j.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jActionPerformed(evt);
            }
        });

        k.setText("0");

        jButton1.setText("Histograma Original");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Histograma Resultante");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        bn.setText("B / N");
        bn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnActionPerformed(evt);
            }
        });

        boxlucion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        boxlucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxlucionActionPerformed(evt);
            }
        });

        jButton3.setText("GUI Frecuencias");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("GUIUmbral");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Original, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Resultante, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(884, 884, 884)
                                .addComponent(bn))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(save)
                                            .addComponent(abrirImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(expansiones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(j, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(k, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(negativos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(silu, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxlucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(365, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(322, 322, 322))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Original, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Resultante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(expansiones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(j, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(k, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(negativos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(jButton3)
                                .addComponent(jButton4))
                            .addGap(29, 29, 29))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(abrirImagen)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bn)
                            .addComponent(boxlucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addComponent(silu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirImagenActionPerformed
        // TODO add your handling code here:
        this.ori = img.openImage();
        Original.setIcon(new ImageIcon(img.reedimensionar(this.ori, Original.getHeight(),Original.getWidth()))); 
        Resultante.setIcon(new ImageIcon(img.reedimensionar(this.ori, Original.getHeight(),Original.getWidth()))); 
        
        if (nega) {
        fin = negativo.generarImagenEnNegativo(this.ori, true, true, true);
        negativos.setEnabled(true);
        }
        if (iluminacion) {
            
        }
        if (temperatura) {
            
          fin =  t.temperaturaImagen(ori, 0);
        }
       
    }//GEN-LAST:event_abrirImagenActionPerformed

    private void negativosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_negativosActionPerformed

    private void negativosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_negativosItemStateChanged
        // TODO add your handling code here: "Todos los canales", "Rojo", "Verde", "Azul","Rojo y verde","Rojo y Azul","Verde y Azul","Azul y Verde"
        if (negativos.getSelectedItem() == "Todos los canales") {
            fin = negativo.generarImagenEnNegativo(this.ori, true, true, true);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (negativos.getSelectedItem() == "Rojo") {
            fin = negativo.generarImagenEnNegativo(this.ori, true, false, false);
             Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (negativos.getSelectedItem() == "Verde") {
            fin = negativo.generarImagenEnNegativo(this.ori, false, true, false);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (negativos.getSelectedItem() == "Azul") {
            fin = negativo.generarImagenEnNegativo(this.ori, false, false, true);
             Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (negativos.getSelectedItem() == "Rojo y verde") {
            fin = negativo.generarImagenEnNegativo(this.ori, true, true, false);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (negativos.getSelectedItem() == "Rojo y Azul") {
            fin = negativo.generarImagenEnNegativo(this.ori, true, false, true);
             Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (negativos.getSelectedItem() == "Verde y Azul") {
           fin = negativo.generarImagenEnNegativo(this.ori, false, true, true);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
    }//GEN-LAST:event_negativosItemStateChanged

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            // TODO add your handling code here:
            img.guardarImagen(fin);
        } catch (IOException ex) {
            Logger.getLogger(GUITodo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void expansionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expansionesActionPerformed
        // TODO add your handling code here:
        int j,k;
        if (expansiones.getSelectedItem() == "Lineal") {
            this.j.setVisible(true); this.k.setVisible(true); this.j.setEnabled(true); this.k.setEnabled(true);
            j = Integer.valueOf(this.j.getText());
            k = Integer.valueOf(this.k.getText());
            fin = ex.expansionLineal(j,k,this.ori);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));        
        }
        if (expansiones.getSelectedItem()=="Logaritmica") {
            this.j.setVisible(true); this.k.setVisible(false); this.j.setEnabled(true); this.k.setEnabled(false);
            j = Integer.valueOf(this.j.getText());
            fin = ex.expansionLogaritmica(j,this.ori);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (expansiones.getSelectedItem()=="Tangente") {
            this.j.setVisible(true); this.k.setVisible(false); this.j.setEnabled(true); this.k.setEnabled(false);
            j = Integer.valueOf(this.j.getText());
            fin = ex.expansionTangencial(j,this.ori);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
        }
        if (expansiones.getSelectedItem()=="Cuadratica") {
            this.j.setVisible(true); this.k.setVisible(false); this.j.setEnabled(true); this.k.setEnabled(false);
            j = Integer.valueOf(this.j.getText());
            fin = ex.expansionCuadratica(j,this.ori);
            Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
            
        }
    }//GEN-LAST:event_expansionesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        HistogramaFrecuencias h2 = new HistogramaFrecuencias(this.ori);
        h2.graficarHistogramasRGB("Histograma Original");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         HistogramaFrecuencias h2 = new HistogramaFrecuencias(this.fin);
        h2.graficarHistogramasRGB("Histograma Resultante");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jActionPerformed

    private void bnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnActionPerformed
        // TODO add your handling code here:
        if (bn.getText()=="B / N") {
        bn.setText("Color");
            if (this.nb!=null) {
                Original.setIcon(new ImageIcon(img.reedimensionar(this.ori, Original.getHeight(),Original.getWidth())));
            }else{
                escalaGrises perro = new escalaGrises();
                this.ori = perro.generarImagenEnGrises(this.ori);
                 Original.setIcon(new ImageIcon(img.reedimensionar(this.ori, Original.getHeight(),Original.getWidth())));
            }
        }else{
        bn.setText("B / N");
                Original.setIcon(new ImageIcon(img.reedimensionar(this.ori, Original.getHeight(),Original.getWidth())));

    }
 
    }//GEN-LAST:event_bnActionPerformed

    private void boxlucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxlucionActionPerformed
        
        Convolucion conv = new Convolucion(this.ori);
        double[][] gx;
        double[][] gy;
       
        
        String aux = this.boxlucion.getSelectedItem().toString();
        switch(aux){
            case "Dif. Pixeles":
                gx= new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                gy = new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                double[][][] kernel = {gx,gy};
                System.out.println("");
                this.fin = conv.aplicar(kernel, 1);
                break;
            case "Pixeles Separados":
                gx= new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                gy = new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                double[][][] k = {gx,gy};
                this.fin = conv.aplicar(k, 1);
                break;
            case "Operador Prewitt":
                gx= new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                gy = new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                double[][][] kpw = {gx,gy};
                this.fin = conv.aplicar(kpw, 1);
                break;
            case "Operador Sobel":
                gx= new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                gy = new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                double[][][] kso = {gx,gy};
                this.fin = conv.aplicar(kso, 1);
                break;
            case "Operador Roberts":
                gx= new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                gy = new double[][]{{0.0, 0.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 0.0, 0.0}};
                double[][][] robertk = {gx,gy};
                this.fin = conv.aplicar(robertk, 1);
                break;
         
            case "Kirsch":
                 double[][] kirsch1 = {{-3, -3, 5}, {-3, 0, 5}, {-3, -3, 5}};
                 double[][] kirsch2 = {{-3, 5, 5}, {-3, 0, 5}, {-3, -3, -3}};
                 double[][] kirsch3 = {{5, 5, 5}, {-3, 0, -3}, {-3, -3, -3}};
                 double[][] kirsch4 = {{5, 5, -3}, {5, 0, -3}, {-3, -3, -3}};
                 double[][] kirsch5 = {{5, -3, -3}, {5, 0, -3}, {5, -3, -3}};
                 double[][] kirsch6 = {{-3, -3, -3}, {5, 0, -3}, {5, 5, -3}};
                 double[][] kirsch7 = {{-3, -3, -3}, {-3, 0, -3}, {5, 5, 5}};
                 double[][] kirsch8 = {{-3, -3, -3}, {-3, 0, 5}, {-3, 5, 5}};
                 double[][][] arregloMascaras = {kirsch1, kirsch2, kirsch3,kirsch4, kirsch5, kirsch6,kirsch7, kirsch8};
                this.fin = conv.aplicar(arregloMascaras, 1);
                   break;
            case "Laplace":
                double[][] laplace = {{0.0, 1.0, 0.0}, {1.0, -4.0, 1.0}, {0.0, 1.0, 0.0}};
                //conv.aplicar(laplace, 1);
                break;
          
        }
        Resultante.setIcon(new ImageIcon(img.reedimensionar(fin, Original.getHeight(),Original.getWidth())));
    }//GEN-LAST:event_boxlucionActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        GUIFrecuencias ventana = new GUIFrecuencias();
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        GUIUmbral umbral = new GUIUmbral();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUITodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUITodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUITodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUITodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUITodo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Original;
    private javax.swing.JLabel Resultante;
    private javax.swing.JButton abrirImagen;
    private javax.swing.JButton bn;
    private javax.swing.JComboBox<String> boxlucion;
    private javax.swing.JComboBox<String> expansiones;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField j;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField k;
    private javax.swing.JComboBox<String> negativos;
    private javax.swing.JButton save;
    private javax.swing.JSlider silu;
    // End of variables declaration//GEN-END:variables
}
